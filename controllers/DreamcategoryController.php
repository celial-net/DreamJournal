<?php

namespace app\controllers;

use app\components\gui\ActionItem;
use app\components\gui\Breadcrumb;
use Yii;
use app\models\dj\DreamCategory;
use app\models\dj\DreamCategorySearch;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * DreamcategoryController implements the CRUD actions for DreamCategory model.
 */
class DreamcategoryController extends BaseController
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [];
    }

    public function beforeAction($action)
	{
		$this->addBreadcrumb(new Breadcrumb('Dream Categories', '/dreamcategory'));
		$this->addActionItem(new ActionItem('New', '/dreamcategory/create', 'primary'));

		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

	/**
     * Lists all DreamCategory models.
     * @return mixed
     */
    public function actionIndex()
    {
		$this->getView()->title = 'Dream Categories';

        $searchModel = new DreamCategorySearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        $request = Yii::$app->request;

        $type = $request->getQueryParam('type');
		if($type == 'json')
		{
			return $this->asJson(DreamCategory::find()->all());
		}
        else
		{
			return $this->render('index', [
				'searchModel' => $searchModel,
				'dataProvider' => $dataProvider,
			]);
		}
    }

    /**
     * Displays a single DreamCategory model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
		$this->addBreadcrumb(new Breadcrumb('View', '', true));

		$this->addActionItem(new ActionItem('Edit', '/dreamcategory/edit/' . $id, 'secondary'));
		$this->addActionItem(new ActionItem('Delete', '/dreamcategory/delete/' . $id, 'danger'));

    	$this->getView()->title = 'View Dream Category';

        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new DreamCategory model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
		$this->addBreadcrumb(new Breadcrumb('New', '', true));

    	$this->getView()->title = 'New Dream Category';

        $model = new DreamCategory();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing DreamCategory model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionEdit($id)
    {
		$this->addBreadcrumb(new Breadcrumb('Edit', '', true));
		$this->addActionItem(new ActionItem('Cancel', '/dreamcategory/view/' . $id, 'secondary'));

    	$this->getView()->title = 'Edit Dream Category';

        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing DreamCategory model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the DreamCategory model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return DreamCategory the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = DreamCategory::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
