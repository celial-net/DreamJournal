<?php

namespace app\controllers;

use app\components\gui\ActionItem;
use app\components\gui\Breadcrumb;
use app\components\gui\flash\Flash;
use app\models\PasswordResetForm;
use app\models\PasswordResetRequestForm;
use app\models\UserUpdateForm;
use Yii;
use yii\filters\AccessControl;
use yii\web\NotFoundHttpException;
use yii\web\Response;
use app\models\LoginForm;
use app\models\RegistrationForm;
use app\models\ContactForm;

class UserController extends BaseController
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
        	'access' => [
                'class' => AccessControl::class,
                'rules' => [
                	[
                		'allow' => true,
						'actions' => ['contact', 'login', 'login', 'register', 'resetrequest', 'reset', 'error', 'captcha'],
						'roles' => ['?', '@']
					],
                    [
                        'actions' => ['logout', 'settings', 'profile'],
                        'allow' => true,
                        'roles' => ['@'],
                    ]
                ]
            ]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => 'test123',
            ],
        ];
    }

    public function beforeAction($action)
	{
		$this->addBreadcrumb(new Breadcrumb('Dream Journal'));
		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

	/**
     * Login action.
     *
     * @return Response|string
     */
    public function actionLogin()
    {
		$this->addBreadcrumb(new Breadcrumb('Login', '', true));

        if (!Yii::$app->user->isGuest)
        {
            return $this->goHome();
        }

        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post()) && $model->login())
        {
			return $this->goBack();
        }

        $model->password = '';
        return $this->render('login', [
            'model' => $model
        ]);
    }

    /**
     * Logout action.
     *
     * @return Response
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

	/**
	 * Password reset request form.
	 */
    public function actionResetrequest()
	{
		if (!Yii::$app->user->isGuest)
		{
			return $this->goHome();
		}

		$this->addBreadcrumb(new Breadcrumb('Password Reset Request', '', true));

		if (!Yii::$app->user->isGuest)
		{
			return $this->goHome();
		}

		$model = new PasswordResetRequestForm();
		if ($model->load(Yii::$app->request->post()) && $model->sendResetLink())
		{
			$this->addFlash(new Flash('An email with a password reset link has been sent. Please check your spam folder in case it is filtered.', Flash::SUCCESS));
			return $this->goBack();
		}

		return $this->render('resetRequest', [
			'model' => $model
		]);
	}

	/**
	 * Password reset form.
	 */
	public function actionReset()
	{
		if (!Yii::$app->user->isGuest)
		{
			return $this->goHome();
		}

		$this->addBreadcrumb(new Breadcrumb('Password Reset', '', true));

		if (!Yii::$app->user->isGuest)
		{
			return $this->goHome();
		}

		$model = new PasswordResetForm();
		$model->code = Yii::$app->request->get('code', '');

		if(!$model->validate('code'))
		{
			throw new NotFoundHttpException('Invalid password reset link.');
		}

		if ($model->load(Yii::$app->request->post()) && $model->resetPassword())
		{
			$this->addFlash(new Flash('Password successfully reset. You can now login with your new password.', Flash::SUCCESS));
			return $this->redirect('/user/login');
		}

		return $this->render('reset', [
			'model' => $model
		]);
	}

    public function actionRegister()
	{
		if (!Yii::$app->user->isGuest)
		{
			return $this->goHome();
		}

		$this->addBreadcrumb(new Breadcrumb('Register', '', true));

		if (!Yii::$app->user->isGuest) {
			return $this->goHome();
		}

		$model = new RegistrationForm();
		if ($model->load(Yii::$app->request->post()) && $model->register()) {
			$this->addFlash(new Flash("You've successfully registered! You can now login.", Flash::SUCCESS));
			return $this->goBack();
		}

		$model->password = '';
		$model->password_verify = '';
		return $this->render('register', [
			'model' => $model,
		]);
	}

	/**
	 * Allows a user to view and update their account settings.
	 */
	public function actionSettings()
	{
		$this->addBreadcrumb(new Breadcrumb('Account Settings'));
		$this->getView()->title = 'Account Settings';

		$accountSettings = $this->getUser()->loadAccountSettings();

		if($this->getRequest()->getIsPost())
		{
			if($accountSettings->load($this->getRequest()->post()))
			{
				if($accountSettings->save())
				{
					$this->addFlash(new Flash('Updated account settings.', Flash::SUCCESS));
				}
				else
				{
					$this->addFlash(new Flash('Failed to update account settings.', Flash::FAILURE));
				}
			}
		}

		return $this->render('account_settings', [
			'accountSettings' => $accountSettings
		]);
	}

	public function actionProfile()
	{
		$this->addBreadcrumb(new Breadcrumb('Profile'));
		$this->getView()->title = 'Profile';
		$this->addActionItem(new ActionItem('Account Settings', '/user/settings', 'primary'));

		$userUpdateForm = new UserUpdateForm();
		$userUpdateForm->name = $this->getUser()->name;
		$userUpdateForm->email = $this->getUser()->email;

		if($this->getRequest()->getIsPost())
		{
			$userUpdateForm->load($this->getRequest()->post());
			if($userUpdateForm->update())
			{
				$this->addFlash(new Flash('Successfully updated proflie information', Flash::SUCCESS));
			}
			else
			{
				foreach($userUpdateForm->getFirstErrors() as $error)
				{
					$this->addFlash(new Flash($error, Flash::FAILURE));
				}
			}
		}

		$userUpdateForm->current_password = '';
		$userUpdateForm->new_password = '';
		$userUpdateForm->new_password_verify = '';

		return $this->render('profile', [
			'userUpdateForm' => $userUpdateForm
		]);
	}

    /**
     * Displays contact page.
     *
     * @return Response|string
     */
    public function actionContact()
    {
        $model = new ContactForm();
        if ($model->load(Yii::$app->request->post()) && $model->contact()) {
            $this->addFlash(new Flash('Thank you for contacting us. We will get back to you as soon as possible.', Flash::SUCCESS));

            return $this->refresh();
        }
        return $this->render('contact', [
            'model' => $model,
        ]);
    }
}
