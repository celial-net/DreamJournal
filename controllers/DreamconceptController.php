<?php

namespace app\controllers;

use app\api\DreamAnalysis\AddWordRequest;
use app\api\DreamAnalysis\DreamAnalysisApi;
use app\components\gui\flash\Flash;
use app\components\gui\js\Script;
use app\models\freud\Word;
use app\models\freud\WordToConcept;
use app\models\freud\WordToConceptQuery;
use Yii;
use app\models\freud\Concept;
use app\models\freud\ConceptSearch;
use app\controllers\BaseController;
use app\components\gui\ActionItem;
use app\components\gui\Breadcrumb;
use yii\filters\AccessControl;
use yii\web\NotFoundHttpException;

/**
 * DreamconceptController implements the CRUD actions for Concept model.
 */
class DreamconceptController extends BaseController
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
    	$access = $this->getAccessByPermission(['manageAdminData']);
    	return $access;
    }

	public function beforeAction($action)
	{
		$this->addBreadcrumb(new Breadcrumb('Dream Journal', '/'));
		$this->addBreadcrumb(new Breadcrumb('Concepts', '/dreamconcept'));
		$this->addActionItem(new ActionItem('New', '/dreamconcept/new', 'primary'));

		//Register Vue for dream comments
		$this->getScriptRegistrar()->registerScript(
			new Script('vue/vue.js')
		);

		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

    /**
     * Lists all Concept models.
     * @return mixed
     */
    public function actionIndex()
    {
		$this->addBreadcrumb(new Breadcrumb('Overview', '', true));
		$this->getView()->title = 'Concepts';		

        $searchModel = new ConceptSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Concept model.
     * @param string $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
		$this->getScriptRegistrar()->registerScript(new Script('dream/concept.js'));

		$this->addBreadcrumb(new Breadcrumb('View', '', true));
		$this->addActionItem(new ActionItem('Edit', '/dreamconcept/edit/' . $id, 'secondary'));
		$this->addActionItem(new ActionItem('Delete', '/dreamconcept/delete/' . $id, 'danger'));
		$this->getView()->title = 'View Concept';

        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Concept model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionNew()
    {
		$this->getScriptRegistrar()->registerScript(new Script('dream/concept.js'));

		$this->addBreadcrumb(new Breadcrumb('New', '', true));
		$this->getView()->title = 'New Concept';

        $model = new Concept();

		$request = Yii::$app->request;
		if($request->getIsPost())
		{
			$post = Yii::$app->request->post();
			$model->load($post);

			if($model->save())
			{
				$conceptWords = $post['Concept']['word'] ?? [];
				if($conceptWords)
				{
					foreach($conceptWords as $wordInfo)
					{
						$conceptWord = trim($wordInfo['word'] ?? '');
						$certainty = floatval($wordInfo['certainty'] ?? NULL);
						if(!$certainty)
						{
							$certainty = 1;
						}

						$word = Word::find()->word($conceptWord)->one();
						if(!$word)
						{
							//Create the word!
							$conceptWord = str_replace(' (new)', '', $conceptWord);
							$dreamAnalysis = new DreamAnalysisApi();
							$wordRequest = new AddWordRequest();
							$wordRequest->word = $conceptWord;
							$wordResponse = $dreamAnalysis->addWord($wordRequest);
							if($wordResponse->isSuccess())
							{
								$word = Word::find()->word($wordResponse->word)->one();
							}
							else
							{
								$this->addFlash(new Flash('Failed to add word ' . $conceptWord . ': ' . $wordResponse->error .  '.', Flash::WARNING));
							}
						}

						if($word)
						{
							$model->link('words', $word, [
								'certainty' => $certainty
							]);
						}
					}
				}
				$this->addFlash(new Flash('Successfully saved concept.', Flash::SUCCESS));
			}
			else
			{
				$this->addFlash(new Flash('Failed to save concept.', Flash::FAILURE));
			}
		}

        return $this->render('_form', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing Concept model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionEdit($id)
    {
		$this->getScriptRegistrar()->registerScript(new Script('dream/concept.js'));

		$this->addBreadcrumb(new Breadcrumb('Edit', '', true));
		$this->addActionItem(new ActionItem('Cancel', '/dreamconcept/view/' . $id, 'secondary'));


		$this->getView()->title = 'Edit Concept';

        $model = $this->findModel($id);

        $request = Yii::$app->request;
        if($request->getIsPost())
        {
        	$post = Yii::$app->request->post();
			$model->load($post);

			//$this->pre($post, true);

			$model->unlinkAll('words', true);
			$conceptWords = $post['Concept']['word'] ?? [];
			if($conceptWords)
			{
				foreach($conceptWords as $wordInfo)
				{
					$conceptWord = trim($wordInfo['word'] ?? '');
					$certainty = floatval($wordInfo['certainty'] ?? NULL);
					if(!$certainty)
					{
						$certainty = 1;
					}

					$word = Word::find()->word($conceptWord)->one();
					if(!$word)
					{
						//Create the word!
						$conceptWord = str_replace(' (new)', '', $conceptWord);
						$dreamAnalysis = new DreamAnalysisApi();
						$wordRequest = new AddWordRequest();
						$wordRequest->word = $conceptWord;
						$wordResponse = $dreamAnalysis->addWord($wordRequest);
						if($wordResponse->isSuccess())
						{
							$word = Word::find()->word($wordResponse->word)->one();
						}
						else
						{
							$this->addFlash(new Flash('Failed to add word ' . $conceptWord . ': ' . $wordResponse->error .  '.', Flash::WARNING));
						}
					}

					if($word)
					{
						$model->link('words', $word, [
							'certainty' => $certainty
						]);
					}
				}
			}

			if($model->save())
			{
				$this->addFlash(new Flash('Successfully updated the concept.', Flash::SUCCESS));
				return $this->redirect(['view', 'id' => $model->getId()]);
			}
			else
			{
				$this->addFlash(new Flash('Failed to update concept.', Flash::FAILURE));
			}
        }

        return $this->render('_form', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing Concept model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }


    # AJAX Routes

	/**
	 * Gets all of the words for a concept.
	 *
	 * @param int $id
	 */
	public function actionConceptwords(int $id)
	{
		$concept = $this->findModel($id);
		$words = $concept->words;

		$wordData = [];
		foreach($words as $word)
		{
			$wordWithCertainty = [];
			$wordWithCertainty['id'] = $word->id;
			$wordWithCertainty['word'] = $word->word;

			$wordToConcept = WordToConcept::find()->andWhere(['word_id' => $word->id])->andWhere(['concept_id' => $id])->one();
			if($wordToConcept)
			{
				$wordWithCertainty['certainty'] = $wordToConcept->certainty;
			}
			$wordData[] = $wordWithCertainty;
		}

		return $this->asJson($wordData);
	}

	/**
	 * Gets all of the words as AJAX based on the search string.
	 *
	 * @param string $search
	 */
    public function actionWords(string $search)
	{
		//Search for matches
		$words = Word::find()->wordLike($search)->all();

		//Add unknown word to results so that it can be selected and created
		if(!Word::find()->word($search)->exists())
		{
			$word = new Word();
			$word->word = $search . ' (new)';
			$word->id = $word->word;
			array_unshift($words, $word);
		}

		$wordData = [];
		foreach($words as $word)
		{
			$wordData[] = [
				'id' => $word->word,
				'text' => $word->word
			];
		}
		return $this->asJson(['results' => $wordData]);
	}

    /**
     * Finds the Concept model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return Concept the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id): Concept    {
		# $id = \Rhumsaa\Uuid\Uuid::fromString($id)->getBytes(); //needed for UUIDs
        if (($model = Concept::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
