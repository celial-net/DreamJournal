<?php

namespace app\controllers;

use Yii;
use app\models\freud\Concept;
use app\models\freud\ConceptSearch;
use app\controllers\BaseController;
use app\components\gui\ActionItem;
use app\components\gui\Breadcrumb;
use yii\web\NotFoundHttpException;

/**
 * DreamconceptController implements the CRUD actions for Concept model.
 */
class DreamconceptController extends BaseController
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [];
    }

	public function beforeAction($action)
	{
		$this->addBreadcrumb(new Breadcrumb('Dream Journal', '/'));
		$this->addBreadcrumb(new Breadcrumb('Concepts', '/dreamconcept'));
		$this->addActionItem(new ActionItem('New', '/dreamconcept/new', 'primary'));

		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

    /**
     * Lists all Concept models.
     * @return mixed
     */
    public function actionIndex()
    {
		$this->addBreadcrumb(new Breadcrumb('Overview', '', true));
		$this->getView()->title = 'Concepts';		

        $searchModel = new ConceptSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Concept model.
     * @param string $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
		$this->addBreadcrumb(new Breadcrumb('View', '', true));
		$this->addActionItem(new ActionItem('Edit', '/dreamconcept/edit/' . $id, 'secondary'));
		$this->addActionItem(new ActionItem('Delete', '/dreamconcept/delete/' . $id, 'danger'));
		$this->getView()->title = 'View Concept';

        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Concept model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionNew()
    {
		$this->addBreadcrumb(new Breadcrumb('New', '', true));
		$this->getView()->title = 'New Concept';

        $model = new Concept();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->getId()]);
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing Concept model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionEdit($id)
    {
		$this->addBreadcrumb(new Breadcrumb('Edit', '', true));
		$this->addActionItem(new ActionItem('Cancel', '/dreamconcept/view/' . $id, 'secondary'));
		$this->getView()->title = 'Edit Concept';

        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->getId()]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing Concept model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Concept model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return Concept the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id): Concept    {
		# $id = \Rhumsaa\Uuid\Uuid::fromString($id)->getBytes(); //needed for UUIDs
        if (($model = Concept::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
